{"version":3,"sources":["Components/Todo.js","Components/Todo-Form.js","Components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","todos","removeTodo","completedTodo","className","map","item","index","isComplete","onClick","id","value","TodoForm","props","useState","input","setInput","type","placeholder","onChange","e","target","onSubmit","Math","floor","random","TodoList","initialState","JSON","parse","localStorage","getItem","setTodos","useEffect","setItem","stringify","todo","console","log","removeArr","filter","completeInfo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPA6BeA,MA1Bf,YAAuD,IAAxCC,EAAuC,EAAvCA,MAAQC,EAA+B,EAA/BA,WAAaC,EAAkB,EAAlBA,cAOlC,OACE,qBAAKC,UAAU,SAAf,SACIH,EAAMI,KAAI,SAACC,EAAKC,GAChB,OACA,sBACEH,UAAaE,EAAKE,WAAa,eAAiB,MADlD,UAIA,qBAAmBJ,UAAa,UAAWK,QAAY,kBAAMN,EAAcG,EAAKI,KAAhF,SACGJ,EAAKK,OADEL,EAAKI,IAGf,cAAC,IAAD,CAAmBN,UAAW,QAASK,QAAY,kBAAMP,EAAWI,EAAKI,SAP9DH,SCiBJK,MA7Bf,SAAkBC,GAAQ,IAAD,EACIC,mBAAS,IADb,mBAChBC,EADgB,KACRC,EADQ,KAavB,OACE,sBAAKZ,UAAa,QAAlB,UAEE,uBACEa,KAAK,OACLN,MAASI,EACTG,YAAY,iBACZC,SAAY,SAAAC,GAAC,OAAIJ,EAASI,EAAEC,OAAOV,UAErC,wBACEF,QApBe,WACnBI,EAAMS,SAAS,CACbZ,GAAGa,KAAKC,MAAoB,IAAdD,KAAKE,UACnBd,MAAMI,EACNP,YAAY,IAEdQ,EAAS,KAaP,0BC4BSU,MA/Cf,WAEE,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,cAAgB,GAFnD,EAGSjB,mBAASa,GAHlB,mBAGX1B,EAHW,KAGH+B,EAHG,KAmClB,OA9BAC,qBAAU,WACRH,aAAaI,QAAQ,WAAaN,KAAKO,UAAUlC,MAC/C,CAACA,IA6BH,sBAAKG,UAAW,OAAhB,UACE,oBAAIA,UAAW,QAAf,sBACA,sBAAKA,UAAW,YAAhB,UACA,cAAC,EAAD,CAAUkB,SA9BE,SAAAc,GACI,KAAfA,EAAKzB,OAINqB,EAAS,GAAD,mBAAK/B,GAAL,CAAamC,QA0BrB,cAAC,EAAD,CAAMnC,MAASA,EAAOC,WAvBP,SAAAkC,GACjBC,QAAQC,IAAIF,GACZ,IAAMG,EAAY,YAAItC,GAAOuC,QAAO,SAAAlC,GAAI,OAAIA,EAAKI,KAAO0B,KACxDJ,EAASO,IAoByCpC,cAjB9B,SAAAO,GACpB,IAAI+B,EAAexC,EAAMI,KAAI,SAAAC,GAK3B,OAJGA,EAAKI,KAAKA,IACXJ,EAAKE,YAAcF,EAAKE,YAGnBF,KAET0B,EAASS,aCzBEC,MARf,WACE,OACE,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.164c3862.chunk.js","sourcesContent":["import React , {useState } from 'react'\r\nimport {AiFillCloseCircle } from 'react-icons/ai'\r\n\r\nfunction Todo({todos , removeTodo , completedTodo  }) {\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  return ( \r\n    <div className=\"fairly\">   \r\n       {todos.map((item,index) => {\r\n        return (\r\n        <div  key={index}  \r\n          className = {item.isComplete ? \"row complete\" : \"row\"} \r\n          \r\n         >\r\n        <div key={item.id} className = {\"display\"} onClick = { () => completedTodo(item.id)}>\r\n          {item.value}\r\n        </div>\r\n        <AiFillCloseCircle className={\"icons\"} onClick = { () => removeTodo(item.id)  }/> \r\n        \r\n      </div>      ) \r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todo\r\n","import React , {useState} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n  const [input , setInput] = useState(\"\")\r\n\r\n  const handleChange = () => {\r\n    props.onSubmit({\r\n      id:Math.floor(Math.random()*1000) ,\r\n      value:input ,\r\n      isComplete: false\r\n    })\r\n    setInput(\"\")\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className = {\"input\"}>\r\n      \r\n      <input  \r\n        type=\"text\" \r\n        value = {input} \r\n        placeholder=\"  Add new Todo\" \r\n        onChange = {e => setInput(e.target.value)} \r\n      />\r\n      <button \r\n        onClick = {handleChange}>Add Todo\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoForm \r\n","import React , {useState , useEffect} from 'react'\r\nimport Todo from './Todo'\r\nimport TodoForm from './Todo-Form'\r\n\r\n\r\nfunction TodoList() {\r\n\r\n  const initialState = JSON.parse(localStorage.getItem(\"DataBase\")) || []\r\n  const [todos , setTodos] = useState(initialState)\r\n\r\n  useEffect(()=> {\r\n    localStorage.setItem(\"DataBase\" , JSON.stringify(todos))\r\n  } , [todos])\r\n\r\n  const addTodo = todo => {\r\n    if(todo.value === \"\"){\r\n      return\r\n    }\r\n   \r\n      setTodos([...todos , todo])\r\n    \r\n  }\r\n  const removeTodo = todo => {\r\n    console.log(todo)\r\n    const removeArr = [...todos].filter(item => item.id !== todo)\r\n    setTodos(removeArr)\r\n  }\r\n\r\n  const completedTodo = id => {\r\n    let completeInfo = todos.map(item => {\r\n      if(item.id===id) {\r\n        item.isComplete = !item.isComplete\r\n      }\r\n      \r\n      return item\r\n    }) \r\n    setTodos(completeInfo)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={\"main\"}> \r\n      <h1 className={\"title\"}>Todo App</h1>\r\n      <div className={\"container\"}>\r\n      <TodoForm onSubmit = {addTodo}/>\r\n      <Todo todos = {todos} removeTodo = {removeTodo} completedTodo = {completedTodo}  />\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","import './App.css';\nimport TodoList from './Components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}